/*
  Copyright (C) 2014 - 2019 by the authors of the ASPECT code.

  This file is part of ASPECT.

  ASPECT is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2, or (at your option)
  any later version.

  ASPECT is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with ASPECT; see the file doc/COPYING.  If not see
  <http://www.gnu.org/licenses/>.
*/


#ifndef _aspect_model_grain_size_h
#define _aspect_model_grain_size_h

#include <aspect/material_model/interface.h>
#include <aspect/material_model/rheology/grain_size_diffusion_dislocation.h>

#include <aspect/simulator_access.h>
#include <array>

namespace aspect
{
  namespace MaterialModel
  {
    using namespace dealii;

    /**
     * A material model that relies on compositional fields that stand for
     * average grain sizes of a mineral phase and source terms for them that
     * determine the grain size evolution in dependence of the strain rate,
     * temperature, phase transitions, and the creep regime.
     * This material model only works if a compositional field
     * named 'grain_size' is present. In the diffusion
     * creep regime, the viscosity depends on this grain size. We use the grain
     * size evolution laws described in Behn et al., 2009. Implications of grain
     * size evolution on the seismic structure of the oceanic upper mantle, Earth
     * Planet. Sci. Letters, 282, 178–189. Other material parameters are either
     * prescribed similar to the 'simple' material model, or read from data files
     * that were generated by the Perplex or Hefesto software. The material model
     * is described in more detail in Dannberg, J., Z. Eilon, U. Faul,
     * R. Gassmöller, P. Moulik, and R. Myhill (2017), The importance of
     * grain size to mantle dynamics and seismological observations,
     * Geochem. Geophys. Geosyst., 18, 3034–3061, doi:10.1002/2017GC006944.,
     * which is the canonical reference for this material model.
     *
     * @ingroup MaterialModels
     */
    template <int dim>
    class GrainSize : public MaterialModel::Interface<dim>, public ::aspect::SimulatorAccess<dim>
    {
      public:
        /**
         * Initialization function. Loads the material data and sets up
         * pointers.
         */
        void
        initialize () override;

        /**
         * Return whether the model is compressible or not.  Incompressibility
         * does not necessarily imply that the density is constant; rather, it
         * may still depend on temperature or pressure. In the current
         * context, compressibility means whether we should solve the contuity
         * equation as $\nabla \cdot (\rho \mathbf u)=0$ (compressible Stokes)
         * or as $\nabla \cdot \mathbf{u}=0$ (incompressible Stokes).
         */
        bool is_compressible () const override;

        double reference_viscosity () const override;

        void evaluate(const typename Interface<dim>::MaterialModelInputs &in,
                      typename Interface<dim>::MaterialModelOutputs &out) const override;

        /**
         * @name Functions used in dealing with run-time parameters
         * @{
         */
        /**
         * Declare the parameters this class takes through input files.
         */
        static
        void
        declare_parameters (ParameterHandler &prm);

        /**
         * Read the parameters this class declares from the parameter file.
         */
        void
        parse_parameters (ParameterHandler &prm) override;


        void
        create_additional_named_outputs (MaterialModel::MaterialModelOutputs<dim> &out) const override;

        /**
         * @}
         */

        /**
         * Returns the enthalpy as calculated by HeFESTo.
         */
        double enthalpy (const double      temperature,
                         const double      pressure,
                         const std::vector<double> &compositional_fields,
                         const Point<dim> &position) const;

        /**
         * Returns the cell-wise averaged enthalpy derivatives for the evaluate
         * function and postprocessors. The function returns two pairs, the
         * first one represents the temperature derivative, the second one the
         * pressure derivative. The first member of each pair is the derivative,
         * the second one the number of vertex combinations the function could
         * use to compute the derivative. The second member is useful to handle
         * the case no suitable combination of vertices could be found (e.g.
         * if the temperature and pressure on all vertices of the current
         * cell is identical.
         */
        std::array<std::pair<double, unsigned int>,2>
        enthalpy_derivative (const typename Interface<dim>::MaterialModelInputs &in) const;

      protected:
        double reference_rho;
        double reference_T;
        double eta;
        double thermal_alpha;
        double reference_specific_heat;

        /**
         * The constant compressibility.
         */
        double reference_compressibility;

        /**
         * The thermal conductivity.
         */
        double k_value;

        double min_specific_heat;
        double max_specific_heat;
        double min_thermal_expansivity;
        double max_thermal_expansivity;
        unsigned int max_latent_heat_substeps;

        double density (const double temperature,
                        const double pressure,
                        const std::vector<double> &compositional_fields,
                        const Point<dim> &position) const;

        double compressibility (const double temperature,
                                const double pressure,
                                const std::vector<double> &compositional_fields,
                                const Point<dim> &position) const;

        double specific_heat (const double temperature,
                              const double pressure,
                              const std::vector<double> &compositional_fields,
                              const Point<dim> &position) const;

        double thermal_expansion_coefficient (const double      temperature,
                                              const double      pressure,
                                              const std::vector<double> &compositional_fields,
                                              const Point<dim> &position) const;

        /**
         * Returns the p-wave velocity as calculated by HeFESTo.
         */
        double seismic_Vp (const double      temperature,
                           const double      pressure,
                           const std::vector<double> &compositional_fields,
                           const Point<dim> &position) const;

        /**
         * Returns the s-wave velocity as calculated by HeFESTo.
         */
        double seismic_Vs (const double      temperature,
                           const double      pressure,
                           const std::vector<double> &compositional_fields,
                           const Point<dim> &position) const;

        /**
         * The following variables are properties of the material files
         * we read in.
         */
        std::string datadirectory;
        std::vector<std::string> material_file_names;
        std::vector<std::string> derivatives_file_names;
        unsigned int n_material_data;
        bool use_table_properties;
        bool use_enthalpy;
        bool use_bilinear_interpolation;


        /**
         * The format of the provided material files. Currently we support
         * the PERPLEX and HeFESTo data formats.
         */
        enum formats
        {
          perplex,
          hefesto
        } material_file_format;

        /**
         * List of pointers to objects that read and process data we get from
         * material data files. There is one pointer/object per compositional
         * field provided.
         */
        std::vector<std::unique_ptr<MaterialModel::MaterialUtilities::Lookup::MaterialLookup> > material_lookup;

        /**
         * handles all rheology.
         */
        Rheology::GrainSizeDiffusionDislocation<dim> grain_size_rheology;
    };

  }
}

#endif
